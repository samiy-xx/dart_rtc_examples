import "dart:html" as p_p;import "dart:json" as p_p_p;import "dart:async" as p;class SupportedBrowser{static const String CHROME="Chrome";static const String FIREFOX="Firefox";static const String IE="Internet Explorer";static const String SAFARI="Safari";final String browserName;final String minimumVersion;const SupportedBrowser(this.browserName,[this.minimumVersion]);}class DomName{final String name;const DomName(this.name);}abstract class RtcEvent{}class MediaStreamAvailableEvent extends RtcEvent{p_p.MediaStream stream;PeerWrapper peerWrapper;bool isLocal=false;MediaStreamAvailableEvent(p_p.MediaStream m,PeerWrapper p_p_p_p,[bool local]){stream=m;peerWrapper=p_p_p_p;if(?local)isLocal=local;}}class PeerStateChangedEvent extends RtcEvent{PeerWrapper peerwrapper;String state;PeerStateChangedEvent(PeerWrapper p_p_p_p,String s){peerwrapper=p_p_p_p;state=s;}}class DataSourceMessageEvent extends RtcEvent{String message;DataSourceMessageEvent(String s){message=s;}}class InitializationState{static final InitializationState NOT_READY=const InitializationState(0);static final InitializationState MEDIA_READY=const InitializationState(1);static final InitializationState REMOTE_READY=const InitializationState(3);static final InitializationState CHANNEL_READY=const InitializationState(4);final int p__state;const InitializationState(int p_state):p__state=p_state;}class PacketEvent extends RtcEvent{Packet packet;PeerWrapper peerwrapper;PacketType type;PacketEvent(Packet p_p_p_p,PeerWrapper pw){packet=p_p_p_p;peerwrapper=pw;type=p_p_p_p.packetType;}}class ChannelSignalHandler extends SignalHandler{String _channelId;bool _isChannelOwner=false;String get channelId=>_channelId;ChannelSignalHandler(DataSource ds):super(ds){registerHandler(PacketType.CHANNEL,handleChannelInfo);}void onOpenDataSource(String p_e){p__log.Debug("(channelsignalhandler.dart) WebSocket connection opened, sending HELO, ${_dataSource.readyState}");_dataSource.send(PacketFactory.p_get(new HeloPacket.With(_channelId,"")));}void handleChannelInfo(ChannelPacket p_p_p_p){p__log.Info("(channelsignalhandler.dart) ChannelPacket owner=${p_p_p_p.owner}");_isChannelOwner=p_p_p_p.owner;}void handleJoin(JoinPacket packet){super.handleJoin(packet);if(packet.id==p__id)_channelId=packet.channelId;if(createPeerOnJoin){PeerWrapper p_p_p_p=_peerManager.findWrapper(packet.id);if(p_p_p_p!=null)p_p_p_p.channel=packet.channelId;}}void handleId(IdPacket p_id){super.handleId(p_id);if(createPeerOnJoin){PeerWrapper p_p_p_p=_peerManager.findWrapper(p_id.id);if(p_p_p_p!=null)p_p_p_p.channel=p_id.channelId;}}}class StreamingSignalHandler extends ChannelSignalHandler{String other=null;StreamingSignalHandler(DataSource ds):super(ds){registerHandler(PacketType.JOIN,onJoinChannel);registerHandler(PacketType.ID,onIdExistingChannelUser);}void onJoinChannel(JoinPacket p_p_p_p){if(channelId!="")print("got channel id channelId");if(p_p_p_p.id!=id)other=p_p_p_p.id;}void onIdExistingChannelUser(IdPacket p_p_p_p){if(p_p_p_p.id!=id)other=p_p_p_p.id;}void handleJoin(JoinPacket p_join){super.handleJoin(p_join);PeerWrapper pw=peerManager.findWrapper(p_join.id);p_p.MediaStream ms=peerManager.getLocalStream();if(ms!=null)pw.addStream(ms);}void handleId(IdPacket p_id){super.handleId(p_id);if(!p_id.id.isEmpty){PeerWrapper pw=peerManager.findWrapper(p_id.id);p_p.MediaStream ms=peerManager.getLocalStream();if(ms!=null)pw.addStream(ms);}}}class NotImplementedException implements Exception{final String msg;final Exception original;const NotImplementedException([this.msg,this.original]);String toString()=>msg==null?"InvalidPacketException":msg;}class ChannelClient implements RtcClient,DataSourceConnectionEventListener,PeerConnectionEventListener,PeerMediaEventListener,PeerDataEventListener{InitializationState _currentState;StreamingSignalHandler _sh;PeerManager _pm;DataSource _ds;VideoConstraints _defaultGetUserMediaConstraints;PeerConstraints _defaultPeerCreationConstraints;StreamConstraints _defaultStreamConstraints;p_p.LocalMediaStream _ms=null;String _channelId;String _myId;String _otherId;PeerManager get peerManager=>_pm;p.StreamController<MediaStreamAvailableEvent> _mediaStreamAvailableStreamController;p.Stream<MediaStreamAvailableEvent> get onRemoteMediaStreamAvailableEvent=>_mediaStreamAvailableStreamController.stream;p.StreamController<MediaStreamRemovedEvent> _mediaStreamRemovedStreamController;p.Stream<MediaStreamRemovedEvent> get onRemoteMediaStreamRemovedEvent=>_mediaStreamRemovedStreamController.stream;p.StreamController<InitializationStateEvent> _initializedController;p.Stream<InitializationStateEvent> get onInitializationStateChangeEvent=>_initializedController.stream;p.StreamController<SignalingOpenEvent> _signalingOpenController;p.Stream<SignalingOpenEvent> get onSignalingOpenEvent=>_signalingOpenController.stream;p.StreamController<SignalingCloseEvent> _signalingCloseController;p.Stream<SignalingCloseEvent> get onSignalingCloseEvent=>_signalingCloseController.stream;p.StreamController<SignalingErrorEvent> _signalingErrorController;p.StreamController<PeerStateChangedEvent> _peerStateChangeController;p.StreamController<IceGatheringStateChangedEvent> _iceGatheringStateChangeController;p.StreamController<DataSourceMessageEvent> _dataSourceMessageController;p.StreamController<DataSourceCloseEvent> _dataSourceCloseController;p.StreamController<DataSourceOpenEvent> _dataSourceOpenController;p.StreamController<DataSourceErrorEvent> _dataSourceErrorController;p.StreamController<PacketEvent> _packetController;ChannelClient(DataSource ds){_ds=ds;_ds.subscribe(this);_pm=new PeerManager();_pm.subscribe(this);_sh=new StreamingSignalHandler(ds);_defaultGetUserMediaConstraints=new VideoConstraints();_defaultPeerCreationConstraints=new PeerConstraints();_defaultStreamConstraints=new StreamConstraints();_initializedController=new p.StreamController<InitializationStateEvent>.broadcast();_mediaStreamAvailableStreamController=new p.StreamController.broadcast();_mediaStreamRemovedStreamController=new p.StreamController.broadcast();_signalingOpenController=new p.StreamController.broadcast();_signalingCloseController=new p.StreamController.broadcast();_signalingErrorController=new p.StreamController.broadcast();_peerStateChangeController=new p.StreamController.broadcast();_iceGatheringStateChangeController=new p.StreamController.broadcast();_dataSourceMessageController=new p.StreamController.broadcast();_dataSourceCloseController=new p.StreamController.broadcast();_dataSourceOpenController=new p.StreamController.broadcast();_dataSourceErrorController=new p.StreamController.broadcast();_packetController=new p.StreamController.broadcast();_sh.registerHandler(PacketType.JOIN,_joinPacketHandler);_sh.registerHandler(PacketType.ID,_idPacketHandler);_sh.registerHandler(PacketType.BYE,_byePacketHandler);_sh.registerHandler(PacketType.CHANNEL,_channelPacketHandler);_sh.registerHandler(PacketType.CONNECTED,_connectionSuccessPacketHandler);_sh.registerHandler(PacketType.CHANNELMESSAGE,_defaultPacketHandler);_sh.registerHandler(PacketType.CHANGENICK,_defaultPacketHandler);}void initialize([VideoConstraints constraints]){VideoConstraints con=?constraints?constraints:_defaultGetUserMediaConstraints;if(!con.audio&&!con.video&&!_defaultPeerCreationConstraints.dataChannelEnabled)throw new Exception("Must require either video, audio or data channel");if((con.audio||con.video)&&_ms==null){if(p_p.MediaStream.supported){p_p.window.navigator.getUserMedia(audio:con.audio,video:con.video).then((p_p.LocalMediaStream p_stream){_ms=p_stream;_pm.setLocalStream(p_stream);_sh.initialize();_setState(InitializationState.MEDIA_READY);_mediaStreamAvailableStreamController.add(new MediaStreamAvailableEvent(p_stream,null,true));});}else{_setState(InitializationState.NOT_READY);return;}}else{_sh.initialize();}}ChannelClient setRequireAudio(bool p_b){_defaultGetUserMediaConstraints.audio=p_b;return this;}ChannelClient setRequireVideo(bool p_b){_defaultGetUserMediaConstraints.video=p_b;return this;}ChannelClient setRequireDataChannel(bool p_b){_defaultPeerCreationConstraints.dataChannelEnabled=p_b;_sh.setDataChannelsEnabled(p_b);return this;}ChannelClient setAutoCreatePeer(bool v){_sh._createPeerOnJoin=v;return this;}void joinChannel(String p_name){_sh.sendPacket(new ChannelJoinCommand.With(_myId,p_name));}void _setState(InitializationState p_state){if(_currentState==p_state)return;_currentState=p_state;if(_initializedController.hasSubscribers)_initializedController.add(new InitializationStateEvent(p_state));}bool setChannelLimit(int l){if(_channelId!=null){_sh.sendPacket(new SetChannelVarsCommand.With(_myId,_channelId,l));return true;}return false;}void _defaultPacketHandler(Packet p_p_p_p){PeerWrapper pw=_pm.findWrapper(p_p_p_p.id);if(_packetController.hasSubscribers)_packetController.add(new PacketEvent(p_p_p_p,pw));}void _connectionSuccessPacketHandler(ConnectionSuccessPacket p_p_p_p){_myId=p_p_p_p.id;if(_channelId!=null)joinChannel(_channelId);_setState(InitializationState.REMOTE_READY);}void _channelPacketHandler(ChannelPacket p_p_p_p){PeerWrapper pw=_pm.findWrapper(p_p_p_p.id);if(_packetController.hasSubscribers)_packetController.add(new PacketEvent(p_p_p_p,pw));_setState(InitializationState.CHANNEL_READY);}void _joinPacketHandler(JoinPacket p_p_p_p){_otherId=p_p_p_p.id;PeerWrapper pw=_pm.findWrapper(p_p_p_p.id);if(_packetController.hasSubscribers)_packetController.add(new PacketEvent(p_p_p_p,pw));}void _idPacketHandler(IdPacket p_p_p_p){_otherId=p_p_p_p.id;PeerWrapper pw=_pm.findWrapper(p_p_p_p.id);if(_packetController.hasSubscribers)_packetController.add(new PacketEvent(p_p_p_p,pw));}void _byePacketHandler(ByePacket p_p_p_p){PeerWrapper pw=_pm.findWrapper(p_p_p_p.id);if(_packetController.hasSubscribers)_packetController.add(new PacketEvent(p_p_p_p,pw));if(_mediaStreamRemovedStreamController.hasSubscribers)_mediaStreamRemovedStreamController.add(new MediaStreamRemovedEvent(pw));}void onChannelStateChanged(DataPeerWrapper p_p_p_p,String p_state){}void onPacket(DataPeerWrapper pw,Packet p_p_p_p){if(_packetController.hasSubscribers)_packetController.add(new PacketEvent(p_p_p_p,pw));}void onRemoteMediaStreamAvailable(p_p.MediaStream ms,PeerWrapper pw,bool p_main){if(_mediaStreamAvailableStreamController.hasSubscribers)_mediaStreamAvailableStreamController.add(new MediaStreamAvailableEvent(ms,pw));}void onRemoteMediaStreamRemoved(PeerWrapper pw){if(_mediaStreamRemovedStreamController.hasSubscribers)_mediaStreamRemovedStreamController.add(new MediaStreamRemovedEvent(pw));}void onPeerCreated(PeerWrapper pw){if(pw is DataPeerWrapper){pw.subscribe(this);}}void onPeerStateChanged(PeerWrapper pw,String p_state){if(_peerStateChangeController.hasSubscribers)_peerStateChangeController.add(new PeerStateChangedEvent(pw,p_state));}void onIceGatheringStateChanged(PeerWrapper pw,String p_state){if(_iceGatheringStateChangeController.hasSubscribers)_iceGatheringStateChangeController.add(new IceGatheringStateChangedEvent(pw,p_state));}void onDataSourceMessage(String m){if(_dataSourceMessageController.hasSubscribers)_dataSourceMessageController.add(new DataSourceMessageEvent(m));}void onCloseDataSource(String m){if(_dataSourceCloseController.hasSubscribers)_dataSourceCloseController.add(new DataSourceCloseEvent(m));if(_signalingCloseController.hasSubscribers)_signalingCloseController.add(new SignalingCloseEvent(m));}void onOpenDataSource(String m){if(_dataSourceOpenController.hasSubscribers)_dataSourceOpenController.add(new DataSourceOpenEvent(m));if(_signalingOpenController.hasSubscribers)_signalingOpenController.add(new SignalingOpenEvent(m));}void onDataSourceError(String p_e){if(_dataSourceErrorController.hasSubscribers)_dataSourceErrorController.add(new DataSourceErrorEvent(p_e));if(_signalingErrorController.hasSubscribers)_signalingErrorController.add(new SignalingErrorEvent(p_e));}}class SignalingOpenEvent extends RtcEvent{String message;SignalingOpenEvent(String m){message=m;}}class StunServer{String _address;String p__port;StunServer(){_address="stun.l.google.com";p__port="19302";}Map toMap(){return {'url':'stun:${_address}:${p__port}'};}}class SignalHandler extends PacketHandler implements PeerPacketEventListener,DataSourceConnectionEventListener{Logger p__log=new Logger();DataSource _dataSource;PeerManager _peerManager;String p__id;bool _dataChannelsEnabled=false;bool _createPeerOnJoin=true;bool get createPeerOnJoin=>_createPeerOnJoin;PeerManager get peerManager=>getPeerManager();set dataChannelsEnabled(bool p_value)=>setDataChannelsEnabled(p_value);String get id=>p__id;SignalHandler(DataSource ds):super(){_dataSource=ds;_dataSource.subscribe(this);_peerManager=new PeerManager();_peerManager.subscribe(this);registerHandler(PacketType.PING,handlePing);registerHandler(PacketType.ICE,handleIce);registerHandler(PacketType.DESC,handleDescription);registerHandler(PacketType.BYE,handleBye);registerHandler(PacketType.CONNECTED,handleConnectionSuccess);registerHandler(PacketType.JOIN,handleJoin);registerHandler(PacketType.ID,handleId);registerHandler(PacketType.CHANGENICK,handleIdChange);}void setDataChannelsEnabled(bool p_value){_dataChannelsEnabled=p_value;_peerManager.dataChannelsEnabled=p_value;}void initialize(){if(_peerManager==null)throw new Exception("PeerManager is null");_dataSource.init();}PeerManager getPeerManager(){return _peerManager;}PeerWrapper createPeerWrapper(){return _peerManager.createPeer();}void onOpenDataSource(String m){p__log.Debug("Connection opened, sending HELO, ${_dataSource.readyState}");_dataSource.send(PacketFactory.p_get(new HeloPacket.With("","")));}void onCloseDataSource(String m){p__log.Debug("Connection closed ${m}");}void onDataSourceError(String p_e){p__log.Error("Error ${p_e}");}void onDataSourceMessage(String m){Packet p_p_p_p;try {p_p_p_p=PacketFactory.getPacketFromString(m);}catch (p_e){p__log.Error(p_e.toString());}if(p_p_p_p!=null){try {if(!executeHandler(p_p_p_p))p__log.Warning("Packet ${p_p_p_p.packetType} has no handlers set");}on Exception catch (p_e){p__log.Error(p_e.toString());}catch (p_e){p__log.Error(p_e.toString());}}}void send(String p_p_p_p){_dataSource.send(p_p_p_p);}void sendPacket(Packet p_p_p_p){send(PacketFactory.p_get(p_p_p_p));}void onPacketToSend(String p_p_p_p){send(p_p_p_p);}void handleJoin(JoinPacket packet){try {p__log.Debug("(signalhandler.dart) JoinPacket channel ${packet.channelId} user ${packet.id}");if(_createPeerOnJoin){PeerWrapper p_p_p_p=createPeerWrapper();p_p_p_p.id=packet.id;p_p_p_p.setAsHost(true);}}catch (p_e){p__log.Error("(signalhandler.dart) Error handleJoin ${p_e}");}}void handleId(IdPacket p_id){p__log.Debug("(signalhandler.dart) ID packet: channel ${p_id.channelId} user ${p_id.id}");if(p_id.id!=null&&!p_id.id.isEmpty){if(_createPeerOnJoin){PeerWrapper p_p_p_p=createPeerWrapper();p_p_p_p.id=p_id.id;}}}void handleIdChange(ChangeNickCommand p_c){p__log.Debug("(signalhandler.dart) CHANGEID packet: user ${p_c.id} to ${p_c.newId}");if(p_c.id==p__id){p__id=p_c.id;}else{PeerWrapper pw=_peerManager.findWrapper(p_c.id);if(pw!=null)pw.id=p_c.newId;}}void handleConnectionSuccess(ConnectionSuccessPacket p_p_p_p){p__log.Debug("(signalhandler.dart) Connection successfull user ${p_p_p_p.id}");p__id=p_p_p_p.id;}void handleIce(IcePacket p_p_p_p){p_p.RtcIceCandidate p_candidate=new p_p.RtcIceCandidate({'candidate':p_p_p_p.candidate,'sdpMid':p_p_p_p.sdpMid,'sdpMLineIndex':p_p_p_p.sdpMLineIndex});PeerWrapper peer=_peerManager.findWrapper(p_p_p_p.id);if(peer!=null){peer.addRemoteIceCandidate(p_candidate);}}void handleDescription(DescriptionPacket p_p_p_p){p__log.Debug("(signalhandler.dart) RECV: DescriptionPacket channel ${p_p_p_p.channelId} user ${p_p_p_p.id}");p_p.RtcSessionDescription t=new p_p.RtcSessionDescription({'sdp':p_p_p_p.sdp,'type':p_p_p_p.type});PeerWrapper peer=_peerManager.findWrapper(p_p_p_p.id);if(peer==null){p__log.Debug("(signalhandler.dart) Peer not found with id ${p_p_p_p.id}. Creating...");peer=createPeerWrapper();peer.id=p_p_p_p.id;}p__log.Debug("(signalhandler.dart) Setting remote description to peer");peer.setRemoteSessionDescription(t);}void handlePing(PingPacket p_p_p_p){p__log.Debug("(signalhandler.dart) Received PING, answering with PONG");_dataSource.send(PacketFactory.p_get(new PongPacket()));}void handleBye(ByePacket p_p_p_p){p__log.Debug("(signalhandler.dart) Received BYE from ${p_p_p_p.id}");PeerWrapper peer=_peerManager.findWrapper(p_p_p_p.id);if(peer!=null){p__log.Debug("(signalhandler.dart) Closing peer ${peer.id}");peer.close();}}void close(){_dataSource.send(PacketFactory.p_get(new ByePacket.With(p__id)));_dataSource.close();}}abstract class DataSource{static final int READYSTATE_CLOSE=0;static final int READYSTATE_OPEN=1;int get readyState;void close();void init();void send(String p_p_p_p);void subscribe(DataSourceEventListener l);}class StreamConstraints implements Constraints{int _bitRate;StreamConstraints(){_bitRate=200;}Map toMap(){return {'mandatory':{},'optional':[{'bandwidth':_bitRate}]};}}class VideoConstraints implements Constraints{bool _audio;bool _video;int _maxWidth;int _maxHeight;int _minWidth;int _minHeight;int _frameRate;bool get audio=>_audio;bool get video=>_video;set audio(bool v)=>_audio=v;set video(bool v)=>_video=v;VideoConstraints(){_audio=true;_video=true;_frameRate=30;_maxWidth=1280;_maxHeight=720;_minWidth=800;_minHeight=600;}Map toMap(){return {'video':_video,'audio':_audio};}}abstract class DataSourceEventListener{}abstract class PeerEventListener{}abstract class BinaryDataEventListener{}class DataPeerWrapper extends PeerWrapper{p_p.RtcDataChannel _dataChannel;Logger p__log=new Logger();String _channelState=null;bool _isReliable=false;set isReliable(bool p_r)=>_isReliable=p_r;DataPeerWrapper(PeerManager pm,p_p.RtcPeerConnection p_p_p_p):super(pm,p_p_p_p){_peer.onDataChannel.listen(_onNewDataChannelOpen);}void setAsHost(bool p_value){super.setAsHost(p_value);p__log.Debug("(datapeerwrapper.dart) Initializing datachannel now");initChannel();}void initialize(){if(_isHost){p__log.Debug("Is Host");initChannel();_sendOffer();}}void initChannel(){_dataChannel=_peer.createDataChannel("somelabelhere",{'reliable':_isReliable});_dataChannel.binaryType="arraybuffer";_dataChannel.onClose.listen(onDataChannelClose);_dataChannel.onOpen.listen(onDataChannelOpen);_dataChannel.onError.listen(onDataChannelError);_dataChannel.onMessage.listen(onDataChannelMessage);}void send(Packet p_p_p_p,[bool asArrayBuffer]){String packet=PacketFactory.p_get(p_p_p_p);if(?asArrayBuffer){p_p.ArrayBuffer buf=BinaryData.p_createBuffer(p_p_p_p);sendData(buf);}else{_dataChannel.send(packet);}}void sendData(p_p.ArrayBuffer p_d){p_p.ArrayBufferView p_view=new p_p.Uint16Array.fromBuffer(p_d);_dataChannel.send(p_view);}void _onNewDataChannelOpen(p_p.RtcDataChannelEvent p_e){_dataChannel=p_e.channel;_dataChannel.onClose.listen(onDataChannelClose);_dataChannel.onOpen.listen(onDataChannelOpen);_dataChannel.onError.listen(onDataChannelError);_dataChannel.onMessage.listen(onDataChannelMessage);}void onDataChannelOpen(p_p.Event p_e){_signalStateChanged();p__log.Debug("(datapeerwrapper.dart) DataChannelOpen ${p_e}");}void onDataChannelClose(p_p.Event p_e){_signalStateChanged();p__log.Debug("(datapeerwrapper.dart) DataChannelClose ${p_e}");}void onDataChannelMessage(p_p.MessageEvent p_e){if(p_e.data is p_p.Blob){p__log.Debug("Received Blob");throw new NotImplementedException("Blob is not implemented");}else if(p_e.data is p_p.ArrayBuffer||p_e.data is p_p.ArrayBufferView){p__log.Debug("Received ArrayBuffer ${p_e.data.runtimeType.toString()}");throw new NotImplementedException("ArrayBuffer is not implemented");}else{p__log.Debug("Received Text");Packet p_p_p_p=PacketFactory.getPacketFromString(p_e.data);if(p_p_p_p!=null){_signalPacketArrived(p_p_p_p);}}}void onDataChannelError(p_p.RtcDataChannelEvent p_e){p__log.Debug("(datapeerwrapper.dart) DataChannelError ${p_e}");}void _signalPacketArrived(Packet p_p_p_p){listeners.where((l)=>l is PeerDataEventListener).forEach((PeerDataEventListener l){l.onPacket(this,p_p_p_p);});}void _signalStateChanged(){if(_dataChannel.readyState!=_channelState){listeners.where((l)=>l is PeerDataEventListener).forEach((PeerDataEventListener l){l.onChannelStateChanged(this,_dataChannel.readyState);});_channelState=_dataChannel.readyState;}}}class BinaryData extends GenericEventTarget<BinaryDataEventListener>{BinaryData();static p_p.ArrayBuffer p_createBuffer(Packet p_p_p_p){String packet=PacketFactory.p_get(p_p_p_p);p_p.ArrayBuffer p_buffer=new p_p.ArrayBuffer(packet.length*2);p_p.Uint8Array p_view=new p_p.Uint8Array.fromBuffer(p_buffer);for(int i=0;i<packet.length;i++ ){p_view[i]=packet.charCodeAt(i);}return p_buffer;}}class PeerWrapper extends GenericEventTarget<PeerEventListener>{final String SDP_OFFER='offer';final String SDP_ANSWER='answer';p_p.RtcPeerConnection _peer;PeerManager _manager;bool _isOpen=false;bool _isHost=false;final Logger p__log=new Logger();String p__id;String _channelId;String get id=>p__id;String get channel=>_channelId;set id(String p_value)=>p__id=p_value;set channel(String p_value)=>_channelId=p_value;p_p.RtcPeerConnection get peer=>_peer;bool get isHost=>_isHost;String get state=>_peer.readyState;PeerWrapper(PeerManager pm,p_p.RtcPeerConnection p_p_p_p){_peer=p_p_p_p;_manager=pm;_peer.onIceCandidate.listen(_onIceCandidate);_peer.onIceChange.listen(_onIceChange);_peer.onNegotiationNeeded.listen(_onNegotiationNeeded);_peer.onStateChange.listen(_onStateChange);}void setAsHost(bool p_value){p__log.Debug("(peerwrapper.dart) Setting as host");_isHost=p_value;}void setSessionDescription(p_p.RtcSessionDescription p_sdp){p__log.Debug("(peerwrapper.dart) Creating local description");_peer.setLocalDescription(p_sdp,_onLocalDescriptionSuccess,_onRTCError);}void setRemoteSessionDescription(p_p.RtcSessionDescription p_sdp){p__log.Debug("(peerwrapper.dart) Setting remote description ${p_sdp.type}");_peer.setRemoteDescription(p_sdp,_onRemoteDescriptionSuccess,_onRTCError);if(p_sdp.type==SDP_OFFER)_sendAnswer();}void initialize(){if(isHost)_sendOffer();}void _sendOffer(){try {_peer.createOffer(_onOfferSuccess,_onRTCError,{'mandatory':{'OfferToReceiveAudio':true,'OfferToReceiveVideo':true}});}on p_p.DomException catch (p_e){p__log.Debug("(peerwrapper.dart) DomException on setting offer constraints, attempting without constraints");_peer.createOffer(_onOfferSuccess,_onRTCError,null);}catch (p_e){p__log.Error("(peerwrapper.dart) Error creating offer ${p_e}");}}void _sendAnswer(){try {_peer.createAnswer(_onAnswerSuccess,_onRTCError,{'mandatory':{'OfferToReceiveAudio':true,'OfferToReceiveVideo':true}});}on p_p.DomException catch (p_e){p__log.Debug("(peerwrapper.dart) DomException on setting answer constraints, attempting without constraints");_peer.createAnswer(_onAnswerSuccess,_onRTCError,null);}catch (p_e){p__log.Error("(peerwrapper.dart) Error creating answer ${p_e}");}}void _onStateChange(p_p.Event p_e){if(_peer.readyState==PEER_STABLE)_isOpen=true;else _isOpen=false;}void _onOfferSuccess(p_p.RtcSessionDescription p_sdp){p__log.Debug("(peerwrapper.dart) Offer created, sending");setSessionDescription(p_sdp);_manager._sendPacket(PacketFactory.p_get(new DescriptionPacket.With(p_sdp.sdp,'offer',p__id,_channelId)));}void _onAnswerSuccess(p_p.RtcSessionDescription p_sdp){p__log.Debug("(peerwrapper.dart) Answer created, sending");setSessionDescription(p_sdp);_manager._sendPacket(PacketFactory.p_get(new DescriptionPacket.With(p_sdp.sdp,'answer',p__id,_channelId)));}void addStream(p_p.MediaStream ms){if(ms==null)throw new Exception("MediaStream was null");p__log.Debug("(peerwrapper.dart) Adding stream to peer ${id}");try {_peer.addStream(ms,_manager.getStreamConstraints().toMap());}on p_p.DomException catch (p_e,s){p__log.Error("DOM Error setting constraints: ${p_e} ${_manager.getStreamConstraints().toMap().toString()}");_peer.addStream(ms);}on Exception catch (p_e){p__log.Error("Exception on adding stream ${p_e}");}catch (p_e){p__log.Error("Exception on adding stream ${p_e}");}}void _onNegotiationNeeded(p_p.Event p_e){p__log.Info("(peerwrapper.dart) onNegotiationNeeded");if(isHost)_sendOffer();}void addRemoteIceCandidate(p_p.RtcIceCandidate p_candidate){if(p_candidate==null)throw new Exception("RtcIceCandidate was null");if(_peer.readyState!=PEER_CLOSED){p__log.Debug("(peerwrapper.dart) Receiving remote ICE Candidate ${p_candidate.candidate}");_peer.addIceCandidate(p_candidate);}}void _onIceCandidate(p_p.RtcIceCandidateEvent p_c){if(p_c.candidate!=null){IcePacket ice=new IcePacket.With(p_c.candidate.candidate,p_c.candidate.sdpMid,p_c.candidate.sdpMLineIndex,id);_manager._sendPacket(PacketFactory.p_get(ice));}else{}}void _onIceChange(p_p.Event p_c){p__log.Debug("(peerwrapper.dart) ICE Change ${p_c} (ice gathering state ${_peer.iceGatheringState}) (ice state ${_peer.iceConnectionState})");}void _onLocalDescriptionSuccess(){p__log.Debug("(peerwrapper.dart) Setting local description was success");}void _onRemoteDescriptionSuccess(){p__log.Debug("(peerwrapper.dart) Setting remote description was success");}void _onRTCError(String p_error){p__log.Error("(peerwrapper.dart) RTC ERROR : ${p_error}");}void close(){p__log.Error("(peerwrapper.dart) Closing peer");if(_peer.readyState!=PEER_CLOSED)_peer.close();}}class PeerManager extends GenericEventTarget<PeerEventListener>{static PeerManager _instance;final Logger p__log=new Logger();bool _setLocalStreamAtStart=false;bool _reliableDataChannels=false;p_p.LocalMediaStream _ms;List<PeerWrapper> _peers;PeerConstraints _peerConstraints;StreamConstraints _streamConstraints;ServerConstraints _serverConstraints;set dataChannelsEnabled(bool p_value)=>_peerConstraints.dataChannelEnabled=p_value;factory PeerManager(){if(_instance==null)_instance=new PeerManager.p__internal();return _instance;}PeerManager.p__internal(){_peers=new List<PeerWrapper>();_streamConstraints=new StreamConstraints();_peerConstraints=new PeerConstraints();_serverConstraints=new ServerConstraints();_serverConstraints.addStun(new StunServer());}void setLocalStream(p_p.LocalMediaStream ms){_ms=ms;_peers.forEach((PeerWrapper p_p_p_p){p_p_p_p.addStream(ms);});}StreamConstraints getStreamConstraints(){return _streamConstraints;}p_p.MediaStream getLocalStream(){return _ms;}PeerWrapper createPeer(){PeerWrapper wrapper=_createWrapper(new p_p.RtcPeerConnection(_serverConstraints.toMap(),_peerConstraints.toMap()));p__add(wrapper);return wrapper;}PeerWrapper _createWrapper(p_p.RtcPeerConnection p_p_p_p){PeerWrapper wrapper;if(_peerConstraints.dataChannelEnabled){wrapper=new DataPeerWrapper(this,p_p_p_p);(wrapper as DataPeerWrapper).isReliable=_reliableDataChannels;}else{wrapper=new PeerWrapper(this,p_p_p_p);}if(_setLocalStreamAtStart&&_ms!=null)wrapper.addStream(_ms);p_p_p_p.onAddStream.listen(onAddStream);p_p_p_p.onRemoveStream.listen(onRemoveStream);p_p_p_p.onStateChange.listen(onStateChanged);p_p_p_p.onIceCandidate.listen(onIceCandidate);listeners.where((l)=>l is PeerConnectionEventListener).forEach((PeerConnectionEventListener l){l.onPeerCreated(wrapper);});return wrapper;}PeerWrapper getWrapperForPeer(p_p.RtcPeerConnection p_p_p_p){for(int i=0;i<_peers.length;i++ ){PeerWrapper wrapper=_peers[i];if(wrapper.peer==p_p_p_p)return wrapper;}return null;}PeerWrapper findWrapper(String p_id){for(int i=0;i<_peers.length;i++ ){PeerWrapper wrapper=_peers[i];if(wrapper.id==p_id)return wrapper;}return null;}void onRemoveStream(p_p.MediaStreamEvent p_e){PeerWrapper wrapper=getWrapperForPeer(p_e.target);listeners.where((l)=>l is PeerMediaEventListener).forEach((PeerMediaEventListener l){l.onRemoteMediaStreamRemoved(wrapper);});}void onIceCandidate(p_p.RtcIceCandidateEvent p_e){if(p_e.candidate==null){listeners.where((l)=>l is PeerConnectionEventListener).forEach((PeerConnectionEventListener l){l.onIceGatheringStateChanged(getWrapperForPeer(p_e.target),"finished");});}}void onAddStream(p_p.MediaStreamEvent p_e){PeerWrapper wrapper=getWrapperForPeer(p_e.target);listeners.where((l)=>l is PeerMediaEventListener).forEach((PeerMediaEventListener l){l.onRemoteMediaStreamAvailable(p_e.stream,wrapper,true);});}void _sendPacket(String p_p_p_p){listeners.where((l)=>l is PeerPacketEventListener).forEach((PeerPacketEventListener l){l.onPacketToSend(p_p_p_p);});}void remove(PeerWrapper p_p_p_p){p_p_p_p.close();}void p__add(PeerWrapper p_p_p_p){if(!_peers.contains(p_p_p_p))_peers.add(p_p_p_p);}void onStateChanged(p_p.Event p_e){PeerWrapper wrapper=getWrapperForPeer(p_e.target);p__log.Debug("(peermanager.dart) onStateChanged: ${wrapper.peer.readyState}");listeners.where((l)=>l is PeerConnectionEventListener).forEach((PeerConnectionEventListener l){l.onPeerStateChanged(wrapper,wrapper.peer.readyState);});if(wrapper.peer.readyState==PEER_CLOSED){int p_index=_peers.indexOf(wrapper);if(p_index>=0)_peers.removeAt(p_index);}else if(wrapper.peer.readyState==PEER_STABLE){p__log.Debug("(peermanager.dart) Peer local and remote descriptions have been exchanged");}}}class WebSocketDataSource extends GenericEventTarget<DataSourceEventListener> implements DataSource{String _connectionString;p_p.WebSocket _ws;int get readyState=>getReadyState();WebSocketDataSource(String connectionString):super(){_connectionString=connectionString;}void init(){_ws=new p_p.WebSocket(_connectionString);_ws.onOpen.listen(onOpen);_ws.onClose.listen(onClose);_ws.onError.listen(onError);_ws.onMessage.listen(onMessage);}int getReadyState(){return _ws.readyState==p_p.WebSocket.OPEN?DataSource.READYSTATE_OPEN:DataSource.READYSTATE_CLOSE;}void send(String p_p_p_p){_ws.send(p_p_p_p);}void close(){_ws.close(1000,"close");}void onMessage(p_p.MessageEvent p_e){listeners.where((l)=>l is DataSourceConnectionEventListener).forEach((l){l.onDataSourceMessage(p_e.data);});}void onOpen(p_p.Event p_e){listeners.where((l)=>l is DataSourceConnectionEventListener).forEach((l){l.onOpenDataSource("");});}void onClose(p_p.CloseEvent p_e){listeners.where((l)=>l is DataSourceConnectionEventListener).forEach((l){l.onCloseDataSource("${p_e.code.toString()} ${p_e.reason}");});}void onError(p_p.Event p_e){listeners.where((l)=>l is DataSourceConnectionEventListener).forEach((l){l.onDataSourceError("");});}}abstract class Constraints{Map toMap();}class SignalingCloseEvent extends RtcEvent{String message;SignalingCloseEvent(String m){message=m;}}class DataSourceCloseEvent extends RtcEvent{String message;DataSourceCloseEvent(String s){message=s;}}class PeerConstraints implements Constraints{bool _dataChannelEnabled;bool _dtlsSrtpKeyAgreement;set dataChannelEnabled(bool p_value)=>setDataChannelEnabled(p_value);bool get dataChannelEnabled=>_dataChannelEnabled;PeerConstraints(){_dataChannelEnabled=false;_dtlsSrtpKeyAgreement=false;}void setDataChannelEnabled(bool p_value){_dataChannelEnabled=p_value;}Map toMap(){return {'optional':[{'RtpDataChannels':_dataChannelEnabled},{'DtlsSrtpKeyAgreement':_dtlsSrtpKeyAgreement}]};}}abstract class DataSourceConnectionEventListener extends DataSourceEventListener{void onDataSourceMessage(String m);void onCloseDataSource(String m);void onOpenDataSource(String m);void onDataSourceError(String p_e);}const String PEER_STABLE="stable";abstract class PeerConnectionEventListener extends PeerEventListener{void onPeerCreated(PeerWrapper pw);void onPeerStateChanged(PeerWrapper pw,String p_state);void onIceGatheringStateChanged(PeerWrapper pw,String p_state);}class IceGatheringStateChangedEvent extends RtcEvent{PeerWrapper peerwrapper;String state;IceGatheringStateChangedEvent(PeerWrapper p_p_p_p,String s){peerwrapper=p_p_p_p;state=s;}}class SignalingErrorEvent extends RtcEvent{String message;SignalingErrorEvent(String m){message=m;}}abstract class RtcClient{void initialize();RtcClient setRequireAudio(bool p_b);RtcClient setRequireVideo(bool p_b);RtcClient setRequireDataChannel(bool p_b);PeerManager get peerManager;p.Stream<MediaStreamAvailableEvent> get onRemoteMediaStreamAvailableEvent;p.Stream<MediaStreamRemovedEvent> get onRemoteMediaStreamRemovedEvent;p.Stream<InitializationStateEvent> get onInitializationStateChangeEvent;p.Stream<SignalingOpenEvent> get onSignalingOpenEvent;p.Stream<SignalingCloseEvent> get onSignalingCloseEvent;}class DataSourceOpenEvent extends RtcEvent{String message;DataSourceOpenEvent(String s){message=s;}}class MediaStreamRemovedEvent extends RtcEvent{PeerWrapper pw;MediaStreamRemovedEvent(PeerWrapper p_p_p_p){pw=p_p_p_p;}}class DataSourceErrorEvent extends RtcEvent{String message;DataSourceErrorEvent(String s){message=s;}}class TurnServer extends StunServer{TurnServer();}class InitializationStateEvent extends RtcEvent{InitializationState state;InitializationStateEvent(InitializationState s){state=s;}}abstract class PeerMediaEventListener extends PeerEventListener{void onRemoteMediaStreamAvailable(p_p.MediaStream ms,PeerWrapper pw,bool p_main);void onRemoteMediaStreamRemoved(PeerWrapper pw);}const String PEER_CLOSED="closed";abstract class PeerPacketEventListener extends PeerEventListener{void onPacketToSend(String p_p_p_p);}class ServerConstraints implements Constraints{List<StunServer> _stunServers;List<TurnServer> _turnServers;ServerConstraints(){_stunServers=new List<StunServer>();_turnServers=new List<TurnServer>();}ServerConstraints addStun(StunServer ss){if(!_stunServers.contains(ss))_stunServers.add(ss);}Map toMap(){Map con=new Map();con['iceServers']=new List<Object>();_stunServers.forEach((StunServer ss)=>con['iceServers'].add(ss.toMap()));_turnServers.forEach((TurnServer ts)=>con['iceServers'].add(ts.toMap()));return con;}}abstract class PeerDataEventListener extends PeerEventListener{void onChannelStateChanged(DataPeerWrapper p_p_p_p,String p_state);void onPacket(DataPeerWrapper pw,Packet p_p_p_p);}abstract class VideoContainer{void setStream(p_p.MediaStream ms);void play();void pause();void destroy();void initialize();String get id;String get aspectRatio;p_p.Element get matcher;p_p.VideoElement get video;}class WebVideoContainer extends VideoContainer{WebVideoManager p__manager;p_p.VideoElement p__video;p_p.DivElement _div;String p_p__id;String _url;String _aspectRatio;String get aspectRatio=>_aspectRatio;p_p.Element get matcher=>p__video;p_p.VideoElement get video=>p__video;set id(String p_value)=>p_p__id=p_value;String get id=>p_p__id;const String CSS_HIDDEN="hidden";const String CSS_VISIBLE="visible";Logger log=new Logger();WebVideoContainer(VideoManager manager,String p_id){p__manager=manager;p_p__id=p_id;p__video=new p_p.VideoElement();_div=new p_p.DivElement();_div.nodes.add(p__video);p__video.onCanPlay.listen(_onCanPlay);p__video.onPlay.listen(_onPlay);p__video.onPause.listen(_onPause);p__video.onEnded.listen(_onStop);p__video.onLoadedMetadata.listen(_onMetadata);matcher.onClick.listen((p_e){print(p_p__id);});}void initialize([bool aux]){p__video.classes.add("vid");p__video.id="vid_${p_p__id}";if(?aux)p__video.classes.add("auxvid");p__video.autoplay=true;p__video.poster=p__manager._poster;}void pause(){p__video.pause();}void play(){p__video.play();}void setStream(p_p.MediaStream m){_url=p_p.Url.createObjectUrl(m);setUrl(_url);}void setUrl(String p_url){p__video.src=p_url;}void destroy(){p__video.pause();matcher.remove();}void _onMetadata(p_p.Event p_e){log.Debug("_onMetadata");_aspectRatio=Util.p_aspectRatio(p__video.videoWidth,p__video.videoHeight);p__manager.setProportions(this);}void _onCanPlay(p_p.Event p_e){log.Debug("_onCanPlay");p__video.play();}void _onPlay(p_p.Event p_e){log.Debug("_onPlay");}void _onStop(p_p.Event p_e){log.Debug("_onStop");}void _onPause(p_p.Event p_e){log.Debug("_onPause");}}class WebVideoManager extends VideoManager{static VideoManager p__instance;Logger log=new Logger();String _poster="/static/img/access.png";List<VideoContainer> _containers;p_p.DivElement _mainHost;p_p.DivElement _childHost;p_p.LocalMediaStream _localStream;factory WebVideoManager(){if(p__instance==null)p__instance=new WebVideoManager._private();return p__instance;}WebVideoManager._private(){_containers=new List<VideoContainer>();}void setMainContainer(String m){_mainHost=p_p.query(m);log.Debug("Setting main container ${m}");log.Debug(_mainHost.id);}void setChildContainer(String p_c){_childHost=p_p.query(p_c);}void addStream(p_p.MediaStream ms,String p_id,[bool main]){VideoContainer vc;if(?main){vc=addVideoContainer(p_id,"main");}else{vc=addVideoContainer(p_id);}vc.setStream(ms);}void setLocalStream(p_p.MediaStream ms){_localStream=ms;}p_p.MediaStream getLocalStream(){return _localStream;}void removeRemoteStream(String p_id){VideoContainer vc=getVideoContainer(p_id);if(vc==null)throw new Exception("VideoContainer with id ${p_id} was not found");removeVideoContainer(vc);}VideoContainer addVideoContainer(String p_id,[String target]){VideoContainer vc=createContainer(p_id);VideoContainer p_main=getMainVideoContainer();p_p.DivElement p_host;if(p_main==null){log.Debug("main is null, setting it to be the host");p_host=_mainHost;}else{log.Debug("host was not null, host id not child");p_host=_childHost;if(?target)p_host=_mainHost.id==target?_mainHost:_childHost;if(p_host==_mainHost){log.Debug("host is now main");moveVideoContainer(p_main,_childHost);}}_containers.add(vc);inject(p_host,vc,true);return vc;}VideoContainer createContainer(String p_id){var v=new WebVideoContainer(this,p_id);v.matcher.onClick.listen(_onContainerClick);_containers.add(v);return v;}void _onContainerClick(p_p.Event p_e){VideoContainer vc=getContainerByMatcherElement(p_e.target);if(!isMain(vc)){addNewMainContainer(vc);}}void addNewMainContainer(VideoContainer vc){VideoContainer p_main=getMainVideoContainer();if(p_main!=null)moveVideoContainer(p_main,_childHost);moveVideoContainer(vc,_mainHost);}void moveVideoContainer(VideoContainer vc,p_p.DivElement newHost){log.Debug("Moving vc ${vc.id} to new host");vc.pause();vc.matcher.remove();inject(newHost,vc);setProportions(vc);vc.play();}void inject(p_p.DivElement p_host,VideoContainer vc,[bool init]){if(?init){vc.initialize();}p_host.nodes.add(vc.matcher);p_host.style.visibility="visible";if(p_host==_mainHost){vc.matcher.classes.remove("auxvid");}else{vc.matcher.classes.add("auxvid");}}void setProportions(VideoContainer vc){log.Debug("setProportions: ${vc.id}");int p_width=isMain(vc)?_mainHost.clientWidth:(_childHost.clientWidth~/3)-3;int p_height=Util.getHeight(p_width,vc.aspectRatio);log.Debug("Width: ${p_width} Height: ${p_height}");vc.video.style.width="${p_width}px";vc.video.style.height="${p_height}px";}bool isMain(VideoContainer vc){return vc.matcher.parent==_mainHost;}VideoContainer getContainerByMatcherElement(p_p.Element p_e){for(int i=0;i<_containers.length;i++ ){VideoContainer vc=_containers[i];if(vc.matcher==p_e){return vc;}}return null;}VideoContainer getContainerByParent(p_p.DivElement p_e){log.Debug("Container size = ${_containers.length}");for(int i=0;i<_containers.length;i++ ){VideoContainer vc=_containers[i];log.Debug("----- ${p_e.id} ${vc.matcher.id}");if(vc.matcher.parent==p_e){return vc;}}return null;}VideoContainer getMainVideoContainer(){return getContainerByParent(_mainHost);}VideoContainer getFirstChildContainer(){return getContainerByParent(_childHost);}VideoContainer getVideoContainer(String p_id){for(int i=0;i<_containers.length;i++ ){VideoContainer vc=_containers[i];if(vc.id==p_id)return vc;}return null;}void removeVideoContainer(VideoContainer vc){bool wasMain=isMain(vc);_containers.removeAt(_containers.indexOf(vc));vc.destroy();vc=null;if(wasMain){var v=getFirstChildContainer();if(v!=null)moveVideoContainer(v,_mainHost);}}}abstract class VideoManager{void addStream(p_p.MediaStream ms,String p_id,[bool main]);VideoContainer addVideoContainer(String p_id);void removeVideoContainer(VideoContainer vc);p_p.MediaStream getLocalStream();}class Notifier{static Notifier p__instance;String _elementId="#xzy_notifier";p_p.DivElement p__element;p_p.HeadingElement _text;int _height=60;p.Timer p__timer;int _interval=300;int _timeout=4000;bool _visible=false;List<Message> _messages;factory Notifier(){if(p__instance==null)p__instance=new Notifier.p_p__internal();return p__instance;}Notifier.p_p__internal(){p_p.DivElement p_e;try {p_e=p_p.query(_elementId);}catch (p_e){}if(p_e==null){p_e=new p_p.DivElement();p_e.id=_elementId;}p__element=p_e;p_p.document.body.nodes.add(p_e);setInitialStyle();_messages=new List<Message>();}void setSize(){p__element.style.left="0px";p__element.style.top="0px";p__element.style.width=generateCssWidth(p_p.document.documentElement.clientWidth);p__element.style.height=generateCssWidth(_height);}void setInitialStyle(){hide();p__element.style.background="#00CCFF";p__element.style.zIndex="9999";p__element.style.border="0px";p__element.style.borderBottom="1px solid #000";p__element.style.position="absolute";p__element.style.margin="0px";p__element.style.padding="0px";p__element.style.textAlign="center";_text=new p_p.HeadingElement.h2();p__element.children.add(_text);setSize();}String generateCssWidth(int w){StringBuffer p_buffer=new StringBuffer();p_buffer.write(w.toString());p_buffer.write("px");return p_buffer.toString();}bool popMessage(){if(_messages.isEmpty)return false;Message m=_messages.removeAt(0);_text.text=m.message;if(m.callback!=null)m.callback();return true;}void popup(){_visible=true;p__element.style.display="block";if(p__timer!=null)p__timer.cancel();popMessage();int i=0;p__timer=new p.Timer.repeating(const Duration(milliseconds:300),(p.Timer t){if(!popMessage()){i++ ;}else{}if(i>=5){i=0;hide();}});}void hide(){if(p__timer!=null){p__timer.cancel();p__timer=null;}_visible=false;p__element.style.display="none";}void display(String p_message,[Function callback]){setSize();_messages.addLast(new Message(p_message,callback));if(!_visible)popup();}}class Message{String message;Function callback;Message(this.message,this.callback);}void main(){int channelLimit=5;p_p.Element p_c=p_p.query("#container");Notifier notifier=new Notifier();WebVideoManager vm=new WebVideoManager();vm.setMainContainer("#main");vm.setChildContainer("#aux");WebVideoContainer vc=vm.addVideoContainer("main_user","main");ChannelClient qClient=new ChannelClient(new WebSocketDataSource("ws://127.0.0.1:8234/ws")).setRequireAudio(true).setRequireVideo(true).setRequireDataChannel(false).setAutoCreatePeer(true);qClient.onInitializationStateChangeEvent.listen((InitializationStateEvent p_e){if(p_e.state==InitializationState.CHANNEL_READY){if(!qClient.setChannelLimit(channelLimit)){notifier.display("Failed to set new channel user limit");}}if(p_e.state==InitializationState.REMOTE_READY){notifier.display("Joining channel abc");qClient.joinChannel("abc");}});qClient.onSignalingOpenEvent.listen((SignalingOpenEvent p_e){notifier.display("Signaling connected to server ${p_e.message}");qClient.setChannelLimit(channelLimit);});qClient.onRemoteMediaStreamAvailableEvent.listen((MediaStreamAvailableEvent p_e){if(p_e.isLocal){vm.setLocalStream(p_e.stream);vc.setStream(p_e.stream);}else{vm.addStream(p_e.stream,p_e.peerWrapper.id);}});qClient.onRemoteMediaStreamRemovedEvent.listen((MediaStreamRemovedEvent p_e){notifier.display("Remote stream removed");vm.removeRemoteStream(p_e.pw.id);});qClient.onSignalingCloseEvent.listen((SignalingCloseEvent p_e){notifier.display("Signaling connection to server has closed (${p_e.message})");new p.Timer(const Duration(milliseconds:10000),(){notifier.display("Attempting to reconnect to server");qClient.initialize();});});qClient.initialize();}class PingPacket implements Packet{PingPacket.With(this.id);PacketType packetType=PacketType.PING;String id="";Map toJson(){return {'packetType':packetType.toString(),'id':id};}static PingPacket fromMap(Map m){return new PingPacket.With(m['id']);}}class IdPacket implements Packet{IdPacket.With(this.id,this.channelId);PacketType packetType=PacketType.ID;String channelId="";String id="";Map toJson(){return {'packetType':packetType.toString(),'channelId':channelId,'id':id};}static IdPacket fromMap(Map m){return new IdPacket.With(m['id'],m['channelId']);}}class RandomUserPacket implements Packet{RandomUserPacket.With(this.id);PacketType packetType=PacketType.RANDOM;String id="";Map toJson(){return {'packetType':packetType.toString(),'id':id};}static RandomUserPacket fromMap(Map m){return new RandomUserPacket.With(m['id']);}}class ChannelMessage implements Packet{ChannelMessage.With(this.id,this.channelId,this.message);PacketType packetType=PacketType.CHANNELMESSAGE;String id="";String channelId="";String message="";Map toJson(){return {'packetType':packetType.toString(),'id':id,'channelId':channelId,'message':message};}static ChannelMessage fromMap(Map m){return new ChannelMessage.With(m['id'],m['channelId'],m['message']);}}class HeloPacket implements Packet{HeloPacket.With(this.channelId,this.id);PacketType packetType=PacketType.HELO;String channelId="";String id="";Map toJson(){return {'packetType':packetType.toString(),'channelId':channelId,'id':id};}static HeloPacket fromMap(Map m){return new HeloPacket.With(m['channelId'],m['id']);}}class DescriptionPacket implements Packet{DescriptionPacket.With(this.sdp,this.type,this.id,this.channelId);PacketType packetType=PacketType.DESC;String sdp;String id;String channelId;String type;Map toJson(){return {'sdp':sdp,'type':type,'id':id,'packetType':packetType.toString(),'channelId':channelId};}static DescriptionPacket fromMap(Map m){return new DescriptionPacket.With(m['sdp'],m['type'],m['id'],m['channelId']);}}class InvalidPacketException implements Exception{final String msg;final Exception original;const InvalidPacketException([this.msg,this.original]);String toString()=>msg==null?"InvalidPacketException":msg;}class ConnectionSuccessPacket implements Packet{ConnectionSuccessPacket.With(this.id);PacketType packetType=PacketType.CONNECTED;String id="";Map toJson(){return {'packetType':packetType.toString(),'id':id};}static ConnectionSuccessPacket fromMap(Map m){return new ConnectionSuccessPacket.With(m['id']);}}class ChannelPacket implements Packet{ChannelPacket.With(this.id,this.channelId,this.owner,this.users,this.limit);PacketType packetType=PacketType.CHANNEL;String id;String channelId;bool owner;int users;int limit;Map toJson(){return {'id':id,'channelId':channelId,'owner':owner,'users':users,'limit':limit,'packetType':packetType.toString()};}static ChannelPacket fromMap(Map m){return new ChannelPacket.With(m['id'],m['channelId'],m['owner'],m['users'],m['limit']);}}class FilePacket implements Packet{FilePacket.With(this.id,this.fileName,this.fileSize);PacketType packetType=PacketType.FILE;String id="";String fileName="";String fileSize="0";Map toJson(){return {'packetType':packetType.toString(),'id':id,'fileName':fileName,'fileSize':fileSize};}static FilePacket fromMap(Map m){return new FilePacket.With(m['id'],m['fileName'],m['fileSize']);}}class PongPacket implements Packet{PongPacket();PacketType packetType=PacketType.PONG;String id;Map toJson(){return {'packetType':packetType.toString()};}static PongPacket fromMap(Map m){return new PongPacket();}}class UserMessage implements Packet{UserMessage.With(this.id,this.message);PacketType packetType=PacketType.USERMESSAGE;String id="";String message="";Map toJson(){return {'packetType':packetType.toString(),'id':id,'message':message};}static UserMessage fromMap(Map m){return new UserMessage.With(m['id'],m['message']);}}class Disconnected extends Packet{Disconnected.With(this.id);PacketType packetType=PacketType.DISCONNECTED;String id="";Map toJson(){return {'packetType':packetType.toString(),'id':id};}static Disconnected fromMap(Map m){return new Disconnected.With(m['id']);}}class JoinPacket implements Packet{JoinPacket.With(this.channelId,this.id);PacketType packetType=PacketType.JOIN;String channelId="";String id="";Map toJson(){return {'packetType':packetType.toString(),'channelId':channelId,'id':id};}static JoinPacket fromMap(Map m){return new JoinPacket.With(m['channelId'],m['id']);}}class QueuePacket implements Packet{QueuePacket.With(this.id,this.channelId,this.position);PacketType packetType=PacketType.QUEUE;String id;String channelId;String position;Map toJson(){return {'id':id,'channelId':channelId,'position':position,'packetType':packetType.toString()};}static QueuePacket fromMap(Map m){return new QueuePacket.With(m['id'],m['channelId'],m['position']);}}class IcePacket implements Packet{IcePacket.With(this.candidate,this.sdpMid,this.sdpMLineIndex,this.id):super();String candidate;String sdpMid;int sdpMLineIndex;String id;PacketType packetType=PacketType.ICE;Map toJson(){return {'candidate':candidate,'sdpMid':sdpMid,'sdpMLineIndex':sdpMLineIndex,'packetType':packetType.toString(),'id':id};}static IcePacket fromMap(Map m){return new IcePacket.With(m['candidate'],m['sdpMid'],m['sdpMLineIndex'],m['id']);}}class PacketType{static const PacketType HELO=const PacketType("helo");static const PacketType DESC=const PacketType("desc");static const PacketType ICE=const PacketType("ice");static const PacketType BYE=const PacketType("bye");static const PacketType JOIN=const PacketType("join");static const PacketType ID=const PacketType("id");static const PacketType PING=const PacketType("ping");static const PacketType PONG=const PacketType("pong");static const PacketType CONNECTED=const PacketType("connected");static const PacketType RANDOM=const PacketType("random");static const PacketType DISCONNECTED=const PacketType("disconnected");static const PacketType QUEUE=const PacketType("queue");static const PacketType FILE=const PacketType("file");static const PacketType NEXT=const PacketType("next");static const PacketType REMOVEUSER=const PacketType("removeuser");static const PacketType USERMESSAGE=const PacketType("usermessage");static const PacketType CHANNELMESSAGE=const PacketType("channelmessage");static const PacketType CHANNEL=const PacketType("channel");static const PacketType CHANNELJOIN=const PacketType("channeljoin");static const PacketType CHANGENICK=const PacketType("changenick");static const PacketType SETCHANNELVARS=const PacketType("setchannelvars");final String type;const PacketType(this.type);String toString()=>type;}abstract class Packet{PacketType packetType;String id;Map toJson();String toString(){return p_p_p.stringify(toJson());}}class GenericEventTarget<p_T>{List<p_T> _listeners;List<p_T> get listeners=>_listeners;GenericEventTarget(){_listeners=new List<p_T>();}void subscribe(p_T p_listener){if(!_listeners.contains(p_listener))_listeners.add(p_listener);}}class ByePacket implements Packet{ByePacket.With(this.id);PacketType packetType=PacketType.BYE;String id="";Map toJson(){return {'packetType':packetType.toString(),'id':id};}static ByePacket fromMap(Map m){return new ByePacket.With(m['id']);}}class PacketHandler{Map<PacketType,List<Function>> _methodHandlers;PacketHandler(){_methodHandlers=new Map<PacketType,List<Function>>();}void registerHandler(PacketType p_type,Function handler){if(!_methodHandlers.containsKey(p_type))_methodHandlers[p_type]=new List<Function>();_methodHandlers[p_type].add(handler);}List<Function> getHandlers(PacketType p_type){if(_methodHandlers.containsKey(p_type))return _methodHandlers[p_type];return null;}bool executeHandler(Packet p_p_p_p){List<Function> handlers=getHandlers(p_p_p_p.packetType);if(handlers==null||handlers.length==0)return false;for(Function p_f in handlers)p_f(p_p_p_p);return true;}}class Util{static String p_aspectRatio(int p_x,int p_y){double p_value=p_x.toDouble()/p_y.toDouble();if(p_value>1.7)return "16:9";else return "4:3";}static int getHeight(int p_width,String p_p_aspectRatio){return p_p_aspectRatio=="4:3"?p_width*3~/4:p_width*9~/16;}}class PacketFactory{static Packet getPacketFromString(String input){try {return getPacketFromMap(p_p_p.parse(input));}on InvalidPacketException catch (p_e){throw p_e;}}static Packet getPacketFromMap(Map m){try {String pt=m['packetType'];Packet p_p_p_p;switch (pt){case "helo":p_p_p_p=HeloPacket.fromMap(m);break;case "desc":p_p_p_p=DescriptionPacket.fromMap(m);break;case "ice":p_p_p_p=IcePacket.fromMap(m);break;case "connected":p_p_p_p=ConnectionSuccessPacket.fromMap(m);break;case "id":p_p_p_p=IdPacket.fromMap(m);break;case "join":p_p_p_p=JoinPacket.fromMap(m);break;case "pong":p_p_p_p=PongPacket.fromMap(m);break;case "ping":p_p_p_p=PingPacket.fromMap(m);break;case "bye":p_p_p_p=ByePacket.fromMap(m);break;case "queue":p_p_p_p=QueuePacket.fromMap(m);break;case "next":p_p_p_p=NextPacket.fromMap(m);break;case "usermessage":p_p_p_p=UserMessage.fromMap(m);break;case "channelmessage":p_p_p_p=ChannelMessage.fromMap(m);break;case "disconnected":p_p_p_p=Disconnected.fromMap(m);break;case "random":p_p_p_p=RandomUserPacket.fromMap(m);break;case "file":p_p_p_p=FilePacket.fromMap(m);break;case "channel":p_p_p_p=ChannelPacket.fromMap(m);break;case "removeuser":p_p_p_p=RemoveUserCommand.fromMap(m);break;case "setchannelvars":p_p_p_p=SetChannelVarsCommand.fromMap(m);break;case "channeljoin":p_p_p_p=ChannelJoinCommand.fromMap(m);break;case "changenick":p_p_p_p=ChangeNickCommand.fromMap(m);break;default:new Logger().Warning("(packetfactory.dart) Unkown packet (${pt})");p_p_p_p=null;break;}return p_p_p_p;}catch (p_e){new Logger().Error(m.toString());throw new InvalidPacketException("Packet was malformed (${m.toString()})",p_e);}}static String p_get(Packet p_p_p_p){return p_p_p.stringify(p_p_p_p);}}class Logger{static Logger instance;LogLevel _logLevel;factory Logger(){if(instance==null){instance=new Logger.p_p_p__internal();}return instance;}Logger.p_p_p__internal(){_logLevel=LogLevel.DEBUG;}void Debug(String p_message){p_p__log(LogLevel.DEBUG,p_message);}void Error(String p_message){p_p__log(LogLevel.p_ERROR,p_message);}void Info(String p_message){p_p__log(LogLevel.INFO,p_message);}void Warning(String p_message){p_p__log(LogLevel.WARN,p_message);}void p_p__log(LogLevel p_level,String p_message){if(p_level>=_logLevel){var p_now=new Date.now();output("[${p_now}] [${p_level.p__type}] ${p_message}");}}void output(String p_message){print(p_message);}}class LogLevel{static final LogLevel DEBUG=const LogLevel(0,"Debug");static final LogLevel INFO=const LogLevel(1,"Info");static final LogLevel WARN=const LogLevel(2,"Warn");static final LogLevel p_ERROR=const LogLevel(3,"Error");final int _level;final String p__type;const LogLevel(int l,String t):_level=l,p__type=t;operator<(LogLevel o){return _level<o._level;}operator<=(LogLevel o){return _level<=o._level;}operator>=(LogLevel o){return _level>=o._level;}}class NextPacket implements Packet{NextPacket.With(this.id,this.channelId);PacketType packetType=PacketType.NEXT;String id;String channelId;Map toJson(){return {'id':id,'channelId':channelId,'packetType':packetType.toString()};}static NextPacket fromMap(Map m){return new NextPacket.With(m['id'],m['channelId']);}}abstract class Command extends Packet{}class RemoveUserCommand implements Command{RemoveUserCommand.With(this.id,this.channelId);PacketType packetType=PacketType.REMOVEUSER;String id;String channelId;Map toJson(){return {'id':id,'channelId':channelId,'packetType':packetType.toString()};}static RemoveUserCommand fromMap(Map m){return new RemoveUserCommand.With(m['id'],m['channelId']);}}class ChannelJoinCommand implements Command{ChannelJoinCommand.With(this.id,this.channelId);String id;String channelId;PacketType packetType=PacketType.CHANNELJOIN;Map toJson(){return {'id':id,'channelId':channelId,'packetType':packetType.toString()};}static ChannelJoinCommand fromMap(Map m){return new ChannelJoinCommand.With(m['id'],m['channelId']);}}class ChangeNickCommand implements Command{ChangeNickCommand.With(this.id,this.newId);String id;String newId;PacketType packetType=PacketType.CHANGENICK;Map toJson(){return {'id':id,'newId':newId,'packetType':packetType.toString()};}static ChangeNickCommand fromMap(Map m){return new ChangeNickCommand.With(m['id'],m['newId']);}}class SetChannelVarsCommand implements Command{SetChannelVarsCommand.With(this.id,this.channelId,this.limit);PacketType packetType=PacketType.SETCHANNELVARS;String id;String channelId;int limit;Map toJson(){return {'id':id,'channelId':channelId,'limit':limit,'packetType':packetType.toString()};}static SetChannelVarsCommand fromMap(Map m){return new SetChannelVarsCommand.With(m['id'],m['channelId'],m['limit']);}}//@ sourceMappingURL=channel_prod.dart.map
